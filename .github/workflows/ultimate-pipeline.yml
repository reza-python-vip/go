# path: .github/workflows/ultimate-pipeline.yml
name: Ultimate Deploy, Scan & Notify (Pro Edition, Error-Proof)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}
  schedule:
    - cron: '0 * * * *'     # hourly full
    - cron: '0 */6 * * *'   # every 6 hours quick scan
  release:
    types: [created]

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

env:
  STRICT: "true"
  TCP_TIMEOUT: "3.0"
  HTTP_TIMEOUT: "5.0"
  DOWNLOAD_TIMEOUT: "8.0"
  CONNECTION_TIMEOUT: "4.0"
  PYTHONUNBUFFERED: "1"

defaults:
  run:
    shell: bash

jobs:
  preflight:
    name: "Preflight: check required files & secrets"
    runs-on: ubuntu-latest
    outputs:
      ok: ${{ steps.check.outputs.ok }}
      deploy_ready: ${{ steps.check.outputs.deploy_ready }}
    steps:
      - uses: actions/checkout@v4

      - id: check
        name: Verify required files & deploy secrets
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          GCP_WID: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        run: |
          set -euo pipefail
          missing=()
          required_files=(
            scripts/deploy_firebase.sh
            scripts/verify_output.py
            src/fetcher.py
            src/xray_tester.py
            src/hiddify_tester.py
            src/filter.py
            src/reporter.py
            requirements.txt
          )
          for f in "${required_files[@]}"; do
            if [ ! -f "$f" ]; then
              echo "::notice::Missing $f"
              missing+=("$f")
            fi
          done

          if (( ${#missing[@]} > 0 )); then
            echo "ok=false" >> "$GITHUB_OUTPUT"
            echo "deploy_ready=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          deploy_ready=false
          if [ -n "${FIREBASE_TOKEN:-}" ] || [ -n "${GCP_WID:-}" ]; then
            deploy_ready=true
          fi

          echo "ok=true" >> "$GITHUB_OUTPUT"
          echo "deploy_ready=${deploy_ready}" >> "$GITHUB_OUTPUT"

  quality_and_security:
    name: Cross-Platform Quality & Security
    needs: preflight
    if: needs.preflight.outputs.ok == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dev & test dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then python -m pip install -r requirements-dev.txt; fi
          if [ -f requirements-test.txt ]; then python -m pip install -r requirements-test.txt; fi

      - name: Auto-format and lint with Ruff
        run: |
          set -euo pipefail
          ruff check --fix .
          ruff format .

      - name: Commit formatting changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          if ! git diff --staged --quiet; then
            git commit -m "style: auto-format code with ruff"
            git push
          fi

      - name: Lint (flake8 strict)
        run: |
          set -euo pipefail
          ruff check . --select=E9,F63,F7,F82 --show-source --statistics

      - name: Security scan (bandit)
        run: |
          set -euo pipefail
          bandit -r . -ll -ii

      - name: Dependency audit (pip-audit)
        run: |
          set -euo pipefail
          pip-audit --progress spinner

      - name: Run tests + coverage
        id: run_tests
        run: |
          set -euo pipefail
          pytest --maxfail=1 --disable-warnings --cov=src --cov-report=xml
          if [ -f coverage.xml ]; then echo "coverage_exists=true" >> "$GITHUB_OUTPUT"; fi

      - name: Upload coverage (Codecov)
        if: steps.run_tests.outputs.coverage_exists == 'true' && github.token != ''
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: ${{ matrix.os }}
          fail_ci_if_error: true

  build_and_scan:
    name: Build, Scan & Verify
    needs: [preflight, quality_and_security]
    if: needs.preflight.outputs.ok == 'true'
    runs-on: ubuntu-latest
    outputs:
      proxy_count: ${{ steps.count.outputs.count }}
    env:
      PYTHONPATH: src
      PYTHONUNBUFFERED: "1"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ubuntu-latest-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install runtime dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Optional installer (install.py)
        run: |
          set -euo pipefail
          if [ -f install.py ]; then python install.py; fi

      - name: Run scan pipeline (main)
        run: |
          set -euo pipefail
          python -m src.main
          chmod +x scripts/verify_output.py
          python scripts/verify_output.py

      - id: count
        name: Count proxies
        run: |
          set -euo pipefail
          cnt=0
          if [ -f output/all.txt ]; then cnt=$(wc -l < output/all.txt | tr -d ' '); fi
          echo "count=$cnt" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: |
            output/
            logs/
          retention-days: 7

  deploy:
    name: Deploy to Firebase
    needs: build_and_scan
    if: needs.preflight.outputs.deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install firebase-tools
        run: |
          set -euo pipefail
          npm ci -g firebase-tools@latest || npm install -g firebase-tools@latest

      - name: Deploy via script (firebase)
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          set -euo pipefail
          chmod +x scripts/deploy_firebase.sh
          if [ -n "${FIREBASE_TOKEN:-}" ]; then
            ./scripts/deploy_firebase.sh --token "$FIREBASE_TOKEN" --project "${GCP_PROJECT_ID:-}"
          else
            ./scripts/deploy_firebase.sh
          fi

  notify:
    name: Notify Users (FCM)
    needs: [preflight, build_and_scan, deploy]
    if: needs.preflight.outputs.deploy_ready == 'true'
    runs-on: ubuntu-latest
    env:
      PROXY_COUNT: ${{ needs.build_and_scan.outputs.proxy_count }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup gcloud (workload-identity)
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate to GCP via Workload Identity
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - id: token
        name: Get access token
        run: |
          set -euo pipefail
          access_token=$(gcloud auth print-access-token) || { echo "::error::Unable to obtain access token"; exit 1; }
          echo "access_token=${access_token}" >> "$GITHUB_OUTPUT"

      - name: Prepare payload and send FCM message
        env:
          ACCESS_TOKEN: ${{ steps.token.outputs.access_token }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          PROXY_COUNT: ${{ needs.build_and_scan.outputs.proxy_count }}
        run: |
          set -euo pipefail
          if [ -z "${ACCESS_TOKEN}" ]; then
            echo "::warning::FCM notification skipped: ACCESS_TOKEN is not available."
            exit 0
          fi
          export TITLE="Proxies Updated"
          export BODY="${PROXY_COUNT} new proxies are available!"
          python notify_script.py
          curl -sS -X POST "https://fcm.googleapis.com/v1/projects/${GCP_PROJECT_ID}/messages:send" \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            --data-binary @payload.json
          rm -f payload.json

  upload_release_assets:
    name: Upload Release Assets
    needs: build_and_scan
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          name: scan-results
          path: output

      - name: Verify presence of output files
        run: |
          set -euo pipefail
          if [ ! -f output/all.txt ]; then echo "::error::Missing output/all.txt"; exit 1; fi

      - name: Upload files to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            output/all.txt
            output/base64_all.txt

  scheduled_quick_scan:
    name: Quick Scheduled Scan
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Run installer (if present)
        run: |
          set -euo pipefail
          if [ -f install.py ]; then python install.py; fi

      - name: Run scanner (quick)
        run: |
          set -euo pipefail
          python -m src.main --quick

      - name: Commit Results (best-effort)
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add output/
          git diff --staged --quiet || git commit -m "Scheduled: Update proxy subscription and report"
          git push || echo "Push failed (repo may be read-only)"
