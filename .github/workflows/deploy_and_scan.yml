name: "Ultimate Deploy, Scan & Notify (Pro Edition, Error-Proof)"

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

env:
  STRICT: "true"
  TCP_TIMEOUT: "3.0"
  HTTP_TIMEOUT: "5.0"
  DOWNLOAD_TIMEOUT: "8.0"
  CONNECTION_TIMEOUT: "4.0"
  PYTHONUNBUFFERED: "1"

jobs:
  ########################################################
  # 0) Preflight
  ########################################################
  preflight:
    name: "Preflight checks"
    runs-on: ubuntu-latest
    outputs:
      ok: ${{ steps.check.outputs.ok }}
      deploy_ready: ${{ steps.check.outputs.deploy_ready }}
    steps:
      - uses: actions/checkout@v3

      - id: check
        name: "Verify required files & deploy secrets"
        shell: bash
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          GCP_WID: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        run: |
          set -euo pipefail
          missing=()
          required_files=(
            scripts/deploy_firebase.sh
            src/fetcher.py
            src/xray_tester.py
            src/hiddify_tester.py
            src/filter.py
            src/reporter.py
            scripts/verify_output.py
            requirements.txt
          )
          for f in "${required_files[@]}"; do
            if [ ! -f "$f" ]; then
              echo "::error::Missing $f"
              missing+=("$f")
            fi
          done

          if (( ${#missing[@]} > 0 )); then
            echo "ok=false" >> "$GITHUB_OUTPUT"
            echo "deploy_ready=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          deploy_ready=false
          if [ -n "${FIREBASE_TOKEN:-}" ] || [ -n "${GCP_WID:-}" ]; then
            deploy_ready=true
          fi

          echo "ok=true" >> "$GITHUB_OUTPUT"
          echo "deploy_ready=${deploy_ready}" >> "$GITHUB_OUTPUT"

  ########################################################
  # 1) Quality & Security
  ########################################################
  quality_and_security:
    name: "Cross-Platform Quality & Security"
    needs: preflight
    if: needs.preflight.outputs.ok == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: "Install dev & test tools"
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
          pip install flake8 bandit pip-audit pytest coverage ruff black isort autoflake || true

      - name: "Auto-fix Python code (ruff/isort/autoflake/black)"
        shell: bash
        run: |
          set -euo pipefail
          ruff check --fix . || true
          isort . || true
          files=$(git ls-files -- '*.py' || true)
          if [ -n "$files" ]; then
            printf "%s\n" $files | xargs --no-run-if-empty autoflake --in-place --remove-unused-variables --remove-all-unused-imports || true
          fi
          black . || true

      - name: "Lint (flake8 strict)"
        shell: bash
        run: |
          set -euo pipefail
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: "Security scan (bandit)"
        shell: bash
        run: |
          set -euo pipefail
          bandit -r . -ll -ii

      - name: "Dependency audit (pip-audit)"
        shell: bash
        run: |
          set -euo pipefail
          pip-audit --progress spinner || true

      - name: "Run tests + coverage"
        id: run_tests
        shell: bash
        run: |
          set -euo pipefail
          # Run tests; allow pytest to fail the step so developers see failures.
          pytest --cov=src --cov-report=xml
          if [ -f coverage.xml ]; then
            echo "coverage_exists=true" >> "$GITHUB_OUTPUT"
          fi

      - name: "Upload coverage (Codecov)"
        if: steps.run_tests.outputs.coverage_exists == 'true' && secrets.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: ${{ matrix.os }}
          fail_ci_if_error: true

  ########################################################
  # 2) Build & Scan
  ########################################################
  build_and_scan:
    name: "Build & Scan"
    needs: [preflight, quality_and_security]
    if: needs.preflight.outputs.ok == 'true'
    runs-on: ubuntu-latest
    outputs:
      proxy_count: ${{ steps.count.outputs.count }}
    env:
      PYTHONPATH: src
      PYTHONUNBUFFERED: "1"
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install runtime deps
        shell: bash
        run: |
          set -euo pipefail
          if [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          fi

      - name: Optional installer (install.py)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f install.py ]; then
            python install.py || true
          fi

      - name: "Run scan pipeline (fetcher, testers, filter, reporter)"
        shell: bash
        run: |
          set -euo pipefail
          python -m src.fetcher || python -m fetcher || { echo "::error::fetcher failed"; exit 1; }
          python -m src.xray_tester || python -m xray_tester || { echo "::error::xray_tester failed"; exit 1; }
          python -m src.hiddify_tester || python -m hiddify_tester || { echo "::error::hiddify_tester failed"; exit 1; }
          python -m src.filter || python -m filter || { echo "::error::filter failed"; exit 1; }
          python -m src.reporter || python -m reporter || { echo "::error::reporter failed"; exit 1; }
          chmod +x scripts/verify_output.py || true
          python scripts/verify_output.py

      - id: count
        name: "Count proxies"
        shell: bash
        run: |
          set -euo pipefail
          cnt=0
          if [ -f output/all.txt ]; then
            cnt=$(wc -l < output/all.txt | tr -d ' ')
          fi
          echo "count=$cnt" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: scan-results
          path: |
            output/
            logs/
          retention-days: 7

  ########################################################
  # 3) Deploy
  ########################################################
  deploy:
    name: "Deploy to Firebase"
    needs: build_and_scan
    if: needs.preflight.outputs.deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install firebase-tools
        shell: bash
        run: |
          set -euo pipefail
          npm install -g firebase-tools@latest

      - name: Deploy via script (firebase)
        shell: bash
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          set -euo pipefail
          chmod +x scripts/deploy_firebase.sh || true
          if [ -n "${FIREBASE_TOKEN:-}" ]; then
            ./scripts/deploy_firebase.sh --token "$FIREBASE_TOKEN" --project "${GCP_PROJECT_ID:-}" || { echo "::error::Firebase deploy failed"; exit 1; }
          else
            ./scripts/deploy_firebase.sh || { echo "::error::Firebase deploy failed (no FIREBASE_TOKEN)"; exit 1; }
          fi

  ########################################################
  # 4) Notify
  ########################################################
  notify:
    name: "Notify Users"
    needs: [deploy, build_and_scan]
    if: needs.preflight.outputs.deploy_ready == 'true'
    runs-on: ubuntu-latest
    env:
      PROXY_COUNT: ${{ needs.build_and_scan.outputs.proxy_count }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup gcloud (workload-identity)
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate to GCP via Workload Identity
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account_email: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - id: token
        name: "Get access token"
        shell: bash
        run: |
          set -euo pipefail
          access_token=$(gcloud auth print-access-token) || { echo "::error::Unable to obtain access token"; exit 1; }
          echo "access_token=${access_token}" >> "$GITHUB_OUTPUT"

      - name: "Prepare payload and send FCM message"
        shell: bash
        env:
          ACCESS_TOKEN: ${{ steps.token.outputs.access_token }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          PROXY_COUNT: ${{ needs.build_and_scan.outputs.proxy_count }}
        run: |
          set -euo pipefail
          TITLE="Proxies Updated"
          BODY="${PROXY_COUNT} new proxies are available!"
          python - <<'PY' > payload.json
          import json
          import time
          import os

          payload = {
              "message": {
                  "topic": "news",
                  "notification": {
                      "title": os.getenv("TITLE", "Proxies Updated"),
                      "body": os.getenv("BODY", "")
                  },
                  "data": {
                      "update_type": "proxy_list",
                      "proxy_count": str(os.getenv("PROXY_COUNT", "0")),
                      "timestamp": str(int(time.time()))
                  }
              }
          }

          print(json.dumps(payload))
          PY

          curl -sS -X POST "https://fcm.googleapis.com/v1/projects/${GCP_PROJECT_ID}/messages:send" \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            --data-binary @payload.json
